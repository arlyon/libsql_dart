// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../utils/params.dart';
import '../utils/result.dart';
import '../utils/return_value.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'statement.dart';
import 'transaction.dart';

class LibsqlConnection {
  final String dbId;

  const LibsqlConnection({
    required this.dbId,
  });

  Future<BatchResult> batch({required String sql}) => RustLib.instance.api
      .crateApiConnectionLibsqlConnectionBatch(that: this, sql: sql);

  Future<void> close() =>
      RustLib.instance.api.crateApiConnectionLibsqlConnectionClose(
        that: this,
      );

  Future<ExecuteResult> execute(
          {required String sql, LibsqlParams? parameters}) =>
      RustLib.instance.api.crateApiConnectionLibsqlConnectionExecute(
          that: this, sql: sql, parameters: parameters);

  Future<PrepareResult> prepare({required String sql}) => RustLib.instance.api
      .crateApiConnectionLibsqlConnectionPrepare(that: this, sql: sql);

  Future<QueryResult> query({required String sql, LibsqlParams? parameters}) =>
      RustLib.instance.api.crateApiConnectionLibsqlConnectionQuery(
          that: this, sql: sql, parameters: parameters);

  Future<SyncResult> sync_() =>
      RustLib.instance.api.crateApiConnectionLibsqlConnectionSync(
        that: this,
      );

  Future<TransactionResult> transaction(
          {LibsqlTransactionBehavior? behavior}) =>
      RustLib.instance.api.crateApiConnectionLibsqlConnectionTransaction(
          that: this, behavior: behavior);

  @override
  int get hashCode => dbId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LibsqlConnection &&
          runtimeType == other.runtimeType &&
          dbId == other.dbId;
}
