// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/connection.dart';
import 'api/libsql.dart';
import 'api/statement.dart';
import 'api/transaction.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/params.dart';
import 'utils/result.dart';
import 'utils/return_value.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiLibsqlInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => 583640217;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'libsql_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BatchResult> crateApiConnectionLibsqlConnectionBatch(
      {required LibsqlConnection that, required String sql});

  Future<void> crateApiConnectionLibsqlConnectionClose(
      {required LibsqlConnection that});

  Future<ExecuteResult> crateApiConnectionLibsqlConnectionExecute(
      {required LibsqlConnection that,
      required String sql,
      LibsqlParams? parameters});

  Future<PrepareResult> crateApiConnectionLibsqlConnectionPrepare(
      {required LibsqlConnection that, required String sql});

  Future<QueryResult> crateApiConnectionLibsqlConnectionQuery(
      {required LibsqlConnection that,
      required String sql,
      LibsqlParams? parameters});

  Future<SyncResult> crateApiConnectionLibsqlConnectionSync(
      {required LibsqlConnection that});

  Future<TransactionResult> crateApiConnectionLibsqlConnectionTransaction(
      {required LibsqlConnection that, LibsqlTransactionBehavior? behavior});

  Future<ConnectResult> crateApiLibsqlConnect({required ConnectArgs args});

  Future<void> crateApiLibsqlInitApp();

  Future<ExecuteResult> crateApiStatementLibsqlStatementExecute(
      {required LibsqlStatement that, LibsqlParams? parameters});

  Future<void> crateApiStatementLibsqlStatementFinalize(
      {required LibsqlStatement that});

  Future<QueryResult> crateApiStatementLibsqlStatementQuery(
      {required LibsqlStatement that, LibsqlParams? parameters});

  Future<void> crateApiStatementLibsqlStatementReset(
      {required LibsqlStatement that});

  Future<TransactionCommitResult> crateApiTransactionLibsqlTransactionCommit(
      {required LibsqlTransaction that});

  Future<ExecuteResult> crateApiTransactionLibsqlTransactionExecute(
      {required LibsqlTransaction that,
      required String sql,
      LibsqlParams? parameters});

  Future<QueryResult> crateApiTransactionLibsqlTransactionQuery(
      {required LibsqlTransaction that,
      required String sql,
      LibsqlParams? parameters});

  Future<TransactionRollbackResult>
      crateApiTransactionLibsqlTransactionRollback(
          {required LibsqlTransaction that});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BatchResult> crateApiConnectionLibsqlConnectionBatch(
      {required LibsqlConnection that, required String sql}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_batch_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionBatchConstMeta,
      argValues: [that, sql],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionBatchConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_batch",
        argNames: ["that", "sql"],
      );

  @override
  Future<void> crateApiConnectionLibsqlConnectionClose(
      {required LibsqlConnection that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionCloseConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_close",
        argNames: ["that"],
      );

  @override
  Future<ExecuteResult> crateApiConnectionLibsqlConnectionExecute(
      {required LibsqlConnection that,
      required String sql,
      LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        sse_encode_String(sql, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_execute_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionExecuteConstMeta,
      argValues: [that, sql, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionExecuteConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_execute",
        argNames: ["that", "sql", "parameters"],
      );

  @override
  Future<PrepareResult> crateApiConnectionLibsqlConnectionPrepare(
      {required LibsqlConnection that, required String sql}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_prepare_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionPrepareConstMeta,
      argValues: [that, sql],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionPrepareConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_prepare",
        argNames: ["that", "sql"],
      );

  @override
  Future<QueryResult> crateApiConnectionLibsqlConnectionQuery(
      {required LibsqlConnection that,
      required String sql,
      LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        sse_encode_String(sql, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_query_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionQueryConstMeta,
      argValues: [that, sql, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionQueryConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_query",
        argNames: ["that", "sql", "parameters"],
      );

  @override
  Future<SyncResult> crateApiConnectionLibsqlConnectionSync(
      {required LibsqlConnection that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sync_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionSyncConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_sync",
        argNames: ["that"],
      );

  @override
  Future<TransactionResult> crateApiConnectionLibsqlConnectionTransaction(
      {required LibsqlConnection that, LibsqlTransactionBehavior? behavior}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_connection(that, serializer);
        sse_encode_opt_box_autoadd_libsql_transaction_behavior(
            behavior, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_transaction_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConnectionLibsqlConnectionTransactionConstMeta,
      argValues: [that, behavior],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionLibsqlConnectionTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_connection_transaction",
        argNames: ["that", "behavior"],
      );

  @override
  Future<ConnectResult> crateApiLibsqlConnect({required ConnectArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_connect_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_connect_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlConnectConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlConnectConstMeta => const TaskConstMeta(
        debugName: "connect",
        argNames: ["args"],
      );

  @override
  Future<void> crateApiLibsqlInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<ExecuteResult> crateApiStatementLibsqlStatementExecute(
      {required LibsqlStatement that, LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_statement(that, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_execute_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStatementLibsqlStatementExecuteConstMeta,
      argValues: [that, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStatementLibsqlStatementExecuteConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_statement_execute",
        argNames: ["that", "parameters"],
      );

  @override
  Future<void> crateApiStatementLibsqlStatementFinalize(
      {required LibsqlStatement that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_statement(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStatementLibsqlStatementFinalizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStatementLibsqlStatementFinalizeConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_statement_finalize",
        argNames: ["that"],
      );

  @override
  Future<QueryResult> crateApiStatementLibsqlStatementQuery(
      {required LibsqlStatement that, LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_statement(that, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_query_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStatementLibsqlStatementQueryConstMeta,
      argValues: [that, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStatementLibsqlStatementQueryConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_statement_query",
        argNames: ["that", "parameters"],
      );

  @override
  Future<void> crateApiStatementLibsqlStatementReset(
      {required LibsqlStatement that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_statement(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStatementLibsqlStatementResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStatementLibsqlStatementResetConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_statement_reset",
        argNames: ["that"],
      );

  @override
  Future<TransactionCommitResult> crateApiTransactionLibsqlTransactionCommit(
      {required LibsqlTransaction that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_transaction(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_transaction_commit_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTransactionLibsqlTransactionCommitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionLibsqlTransactionCommitConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_transaction_commit",
        argNames: ["that"],
      );

  @override
  Future<ExecuteResult> crateApiTransactionLibsqlTransactionExecute(
      {required LibsqlTransaction that,
      required String sql,
      LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_transaction(that, serializer);
        sse_encode_String(sql, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_execute_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTransactionLibsqlTransactionExecuteConstMeta,
      argValues: [that, sql, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionLibsqlTransactionExecuteConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_transaction_execute",
        argNames: ["that", "sql", "parameters"],
      );

  @override
  Future<QueryResult> crateApiTransactionLibsqlTransactionQuery(
      {required LibsqlTransaction that,
      required String sql,
      LibsqlParams? parameters}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_transaction(that, serializer);
        sse_encode_String(sql, serializer);
        sse_encode_opt_box_autoadd_libsql_params(parameters, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_query_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTransactionLibsqlTransactionQueryConstMeta,
      argValues: [that, sql, parameters],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionLibsqlTransactionQueryConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_transaction_query",
        argNames: ["that", "sql", "parameters"],
      );

  @override
  Future<TransactionRollbackResult>
      crateApiTransactionLibsqlTransactionRollback(
          {required LibsqlTransaction that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_libsql_transaction(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_transaction_rollback_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTransactionLibsqlTransactionRollbackConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionLibsqlTransactionRollbackConstMeta =>
      const TaskConstMeta(
        debugName: "libsql_transaction_rollback",
        argNames: ["that"],
      );

  @protected
  Map<String, LibsqlReturnValue> dco_decode_Map_String_libsql_return_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_libsql_return_value(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, LibsqlValue> dco_decode_Map_String_libsql_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_libsql_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BatchResult dco_decode_batch_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return BatchResult();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConnectArgs dco_decode_box_autoadd_connect_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connect_args(raw);
  }

  @protected
  LibsqlConnection dco_decode_box_autoadd_libsql_connection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_connection(raw);
  }

  @protected
  LibsqlOpenFlags dco_decode_box_autoadd_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_open_flags(raw);
  }

  @protected
  LibsqlParams dco_decode_box_autoadd_libsql_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_params(raw);
  }

  @protected
  LibsqlStatement dco_decode_box_autoadd_libsql_statement(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_statement(raw);
  }

  @protected
  LibsqlTransaction dco_decode_box_autoadd_libsql_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_transaction(raw);
  }

  @protected
  LibsqlTransactionBehavior dco_decode_box_autoadd_libsql_transaction_behavior(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_transaction_behavior(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ConnectArgs dco_decode_connect_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ConnectArgs(
      url: dco_decode_String(arr[0]),
      authToken: dco_decode_opt_String(arr[1]),
      syncUrl: dco_decode_opt_String(arr[2]),
      syncIntervalSeconds: dco_decode_opt_box_autoadd_u_64(arr[3]),
      encryptionKey: dco_decode_opt_String(arr[4]),
      readYourWrites: dco_decode_opt_box_autoadd_bool(arr[5]),
      openFlags: dco_decode_opt_box_autoadd_libsql_open_flags(arr[6]),
    );
  }

  @protected
  ConnectResult dco_decode_connect_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConnectResult(
      connection: dco_decode_libsql_connection(arr[0]),
    );
  }

  @protected
  ExecuteResult dco_decode_execute_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ExecuteResult(
      rowsAffected: dco_decode_u_64(arr[0]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  LibsqlConnection dco_decode_libsql_connection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LibsqlConnection(
      dbId: dco_decode_String(arr[0]),
    );
  }

  @protected
  LibsqlOpenFlags dco_decode_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibsqlOpenFlags.values[raw as int];
  }

  @protected
  LibsqlParams dco_decode_libsql_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LibsqlParams(
      positional: dco_decode_opt_list_libsql_value(arr[0]),
      named: dco_decode_opt_Map_String_libsql_value(arr[1]),
    );
  }

  @protected
  LibsqlReturnValue dco_decode_libsql_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LibsqlReturnValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 1:
        return LibsqlReturnValue_Real(
          dco_decode_f_64(raw[1]),
        );
      case 2:
        return LibsqlReturnValue_Text(
          dco_decode_String(raw[1]),
        );
      case 3:
        return LibsqlReturnValue_Blob(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 4:
        return LibsqlReturnValue_Null();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LibsqlStatement dco_decode_libsql_statement(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LibsqlStatement(
      statementId: dco_decode_String(arr[0]),
    );
  }

  @protected
  LibsqlTransaction dco_decode_libsql_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LibsqlTransaction(
      transactionId: dco_decode_String(arr[0]),
    );
  }

  @protected
  LibsqlTransactionBehavior dco_decode_libsql_transaction_behavior(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibsqlTransactionBehavior.values[raw as int];
  }

  @protected
  LibsqlValue dco_decode_libsql_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LibsqlValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 1:
        return LibsqlValue_Real(
          dco_decode_f_64(raw[1]),
        );
      case 2:
        return LibsqlValue_Text(
          dco_decode_String(raw[1]),
        );
      case 3:
        return LibsqlValue_Blob(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 4:
        return LibsqlValue_Null();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<Map<String, LibsqlReturnValue>>
      dco_decode_list_Map_String_libsql_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_Map_String_libsql_return_value)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<LibsqlValue> dco_decode_list_libsql_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_libsql_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, LibsqlReturnValue)>
      dco_decode_list_record_string_libsql_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_libsql_return_value)
        .toList();
  }

  @protected
  List<(String, LibsqlValue)> dco_decode_list_record_string_libsql_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_libsql_value)
        .toList();
  }

  @protected
  Map<String, LibsqlValue>? dco_decode_opt_Map_String_libsql_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_libsql_value(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  LibsqlOpenFlags? dco_decode_opt_box_autoadd_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_libsql_open_flags(raw);
  }

  @protected
  LibsqlParams? dco_decode_opt_box_autoadd_libsql_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_libsql_params(raw);
  }

  @protected
  LibsqlTransactionBehavior?
      dco_decode_opt_box_autoadd_libsql_transaction_behavior(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_libsql_transaction_behavior(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<LibsqlValue>? dco_decode_opt_list_libsql_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_libsql_value(raw);
  }

  @protected
  PrepareResult dco_decode_prepare_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PrepareResult(
      statement: dco_decode_libsql_statement(arr[0]),
    );
  }

  @protected
  QueryResult dco_decode_query_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return QueryResult(
      rows: dco_decode_list_Map_String_libsql_return_value(arr[0]),
      columns: dco_decode_list_String(arr[1]),
      rowsAffected: dco_decode_u_64(arr[2]),
      lastInsertRowid: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  (String, LibsqlReturnValue) dco_decode_record_string_libsql_return_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_libsql_return_value(arr[1]),
    );
  }

  @protected
  (String, LibsqlValue) dco_decode_record_string_libsql_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_libsql_value(arr[1]),
    );
  }

  @protected
  SyncResult dco_decode_sync_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SyncResult();
  }

  @protected
  TransactionCommitResult dco_decode_transaction_commit_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return TransactionCommitResult();
  }

  @protected
  TransactionResult dco_decode_transaction_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TransactionResult(
      transaction: dco_decode_libsql_transaction(arr[0]),
    );
  }

  @protected
  TransactionRollbackResult dco_decode_transaction_rollback_result(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return TransactionRollbackResult();
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Map<String, LibsqlReturnValue> sse_decode_Map_String_libsql_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_libsql_return_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, LibsqlValue> sse_decode_Map_String_libsql_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_libsql_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BatchResult sse_decode_batch_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BatchResult();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  ConnectArgs sse_decode_box_autoadd_connect_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connect_args(deserializer));
  }

  @protected
  LibsqlConnection sse_decode_box_autoadd_libsql_connection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_connection(deserializer));
  }

  @protected
  LibsqlOpenFlags sse_decode_box_autoadd_libsql_open_flags(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_open_flags(deserializer));
  }

  @protected
  LibsqlParams sse_decode_box_autoadd_libsql_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_params(deserializer));
  }

  @protected
  LibsqlStatement sse_decode_box_autoadd_libsql_statement(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_statement(deserializer));
  }

  @protected
  LibsqlTransaction sse_decode_box_autoadd_libsql_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_transaction(deserializer));
  }

  @protected
  LibsqlTransactionBehavior sse_decode_box_autoadd_libsql_transaction_behavior(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_transaction_behavior(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ConnectArgs sse_decode_connect_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_authToken = sse_decode_opt_String(deserializer);
    var var_syncUrl = sse_decode_opt_String(deserializer);
    var var_syncIntervalSeconds = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_encryptionKey = sse_decode_opt_String(deserializer);
    var var_readYourWrites = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_openFlags =
        sse_decode_opt_box_autoadd_libsql_open_flags(deserializer);
    return ConnectArgs(
        url: var_url,
        authToken: var_authToken,
        syncUrl: var_syncUrl,
        syncIntervalSeconds: var_syncIntervalSeconds,
        encryptionKey: var_encryptionKey,
        readYourWrites: var_readYourWrites,
        openFlags: var_openFlags);
  }

  @protected
  ConnectResult sse_decode_connect_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_connection = sse_decode_libsql_connection(deserializer);
    return ConnectResult(connection: var_connection);
  }

  @protected
  ExecuteResult sse_decode_execute_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rowsAffected = sse_decode_u_64(deserializer);
    return ExecuteResult(rowsAffected: var_rowsAffected);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  LibsqlConnection sse_decode_libsql_connection(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    return LibsqlConnection(dbId: var_dbId);
  }

  @protected
  LibsqlOpenFlags sse_decode_libsql_open_flags(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LibsqlOpenFlags.values[inner];
  }

  @protected
  LibsqlParams sse_decode_libsql_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_positional = sse_decode_opt_list_libsql_value(deserializer);
    var var_named = sse_decode_opt_Map_String_libsql_value(deserializer);
    return LibsqlParams(positional: var_positional, named: var_named);
  }

  @protected
  LibsqlReturnValue sse_decode_libsql_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_64(deserializer);
        return LibsqlReturnValue_Integer(var_field0);
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return LibsqlReturnValue_Real(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return LibsqlReturnValue_Text(var_field0);
      case 3:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return LibsqlReturnValue_Blob(var_field0);
      case 4:
        return LibsqlReturnValue_Null();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LibsqlStatement sse_decode_libsql_statement(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_statementId = sse_decode_String(deserializer);
    return LibsqlStatement(statementId: var_statementId);
  }

  @protected
  LibsqlTransaction sse_decode_libsql_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transactionId = sse_decode_String(deserializer);
    return LibsqlTransaction(transactionId: var_transactionId);
  }

  @protected
  LibsqlTransactionBehavior sse_decode_libsql_transaction_behavior(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LibsqlTransactionBehavior.values[inner];
  }

  @protected
  LibsqlValue sse_decode_libsql_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_64(deserializer);
        return LibsqlValue_Integer(var_field0);
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return LibsqlValue_Real(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return LibsqlValue_Text(var_field0);
      case 3:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return LibsqlValue_Blob(var_field0);
      case 4:
        return LibsqlValue_Null();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<Map<String, LibsqlReturnValue>>
      sse_decode_list_Map_String_libsql_return_value(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Map<String, LibsqlReturnValue>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Map_String_libsql_return_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<LibsqlValue> sse_decode_list_libsql_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LibsqlValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_libsql_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, LibsqlReturnValue)>
      sse_decode_list_record_string_libsql_return_value(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, LibsqlReturnValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_libsql_return_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, LibsqlValue)> sse_decode_list_record_string_libsql_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, LibsqlValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_libsql_value(deserializer));
    }
    return ans_;
  }

  @protected
  Map<String, LibsqlValue>? sse_decode_opt_Map_String_libsql_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_libsql_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LibsqlOpenFlags? sse_decode_opt_box_autoadd_libsql_open_flags(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_libsql_open_flags(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LibsqlParams? sse_decode_opt_box_autoadd_libsql_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_libsql_params(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LibsqlTransactionBehavior?
      sse_decode_opt_box_autoadd_libsql_transaction_behavior(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_libsql_transaction_behavior(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<LibsqlValue>? sse_decode_opt_list_libsql_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_libsql_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PrepareResult sse_decode_prepare_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_statement = sse_decode_libsql_statement(deserializer);
    return PrepareResult(statement: var_statement);
  }

  @protected
  QueryResult sse_decode_query_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rows = sse_decode_list_Map_String_libsql_return_value(deserializer);
    var var_columns = sse_decode_list_String(deserializer);
    var var_rowsAffected = sse_decode_u_64(deserializer);
    var var_lastInsertRowid = sse_decode_i_64(deserializer);
    return QueryResult(
        rows: var_rows,
        columns: var_columns,
        rowsAffected: var_rowsAffected,
        lastInsertRowid: var_lastInsertRowid);
  }

  @protected
  (String, LibsqlReturnValue) sse_decode_record_string_libsql_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_libsql_return_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, LibsqlValue) sse_decode_record_string_libsql_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_libsql_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SyncResult sse_decode_sync_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SyncResult();
  }

  @protected
  TransactionCommitResult sse_decode_transaction_commit_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionCommitResult();
  }

  @protected
  TransactionResult sse_decode_transaction_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transaction = sse_decode_libsql_transaction(deserializer);
    return TransactionResult(transaction: var_transaction);
  }

  @protected
  TransactionRollbackResult sse_decode_transaction_rollback_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionRollbackResult();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_Map_String_libsql_return_value(
      Map<String, LibsqlReturnValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_libsql_return_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_libsql_value(
      Map<String, LibsqlValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_libsql_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_batch_result(BatchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_connect_args(
      ConnectArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connect_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_connection(
      LibsqlConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_connection(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_open_flags(
      LibsqlOpenFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_open_flags(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_params(
      LibsqlParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_statement(
      LibsqlStatement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_statement(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_transaction(
      LibsqlTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_transaction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_transaction_behavior(
      LibsqlTransactionBehavior self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_transaction_behavior(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_connect_args(ConnectArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.authToken, serializer);
    sse_encode_opt_String(self.syncUrl, serializer);
    sse_encode_opt_box_autoadd_u_64(self.syncIntervalSeconds, serializer);
    sse_encode_opt_String(self.encryptionKey, serializer);
    sse_encode_opt_box_autoadd_bool(self.readYourWrites, serializer);
    sse_encode_opt_box_autoadd_libsql_open_flags(self.openFlags, serializer);
  }

  @protected
  void sse_encode_connect_result(ConnectResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_connection(self.connection, serializer);
  }

  @protected
  void sse_encode_execute_result(ExecuteResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.rowsAffected, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_libsql_connection(
      LibsqlConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
  }

  @protected
  void sse_encode_libsql_open_flags(
      LibsqlOpenFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_libsql_params(LibsqlParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_libsql_value(self.positional, serializer);
    sse_encode_opt_Map_String_libsql_value(self.named, serializer);
  }

  @protected
  void sse_encode_libsql_return_value(
      LibsqlReturnValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LibsqlReturnValue_Integer(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_64(field0, serializer);
      case LibsqlReturnValue_Real(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
      case LibsqlReturnValue_Text(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case LibsqlReturnValue_Blob(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case LibsqlReturnValue_Null():
        sse_encode_i_32(4, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_libsql_statement(
      LibsqlStatement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.statementId, serializer);
  }

  @protected
  void sse_encode_libsql_transaction(
      LibsqlTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.transactionId, serializer);
  }

  @protected
  void sse_encode_libsql_transaction_behavior(
      LibsqlTransactionBehavior self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_libsql_value(LibsqlValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LibsqlValue_Integer(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_64(field0, serializer);
      case LibsqlValue_Real(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
      case LibsqlValue_Text(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case LibsqlValue_Blob(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case LibsqlValue_Null():
        sse_encode_i_32(4, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_list_Map_String_libsql_return_value(
      List<Map<String, LibsqlReturnValue>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Map_String_libsql_return_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_libsql_value(
      List<LibsqlValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_libsql_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_libsql_return_value(
      List<(String, LibsqlReturnValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_libsql_return_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_libsql_value(
      List<(String, LibsqlValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_libsql_value(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_Map_String_libsql_value(
      Map<String, LibsqlValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_libsql_value(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_libsql_open_flags(
      LibsqlOpenFlags? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_libsql_open_flags(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_libsql_params(
      LibsqlParams? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_libsql_params(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_libsql_transaction_behavior(
      LibsqlTransactionBehavior? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_libsql_transaction_behavior(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_libsql_value(
      List<LibsqlValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_libsql_value(self, serializer);
    }
  }

  @protected
  void sse_encode_prepare_result(PrepareResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_statement(self.statement, serializer);
  }

  @protected
  void sse_encode_query_result(QueryResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Map_String_libsql_return_value(self.rows, serializer);
    sse_encode_list_String(self.columns, serializer);
    sse_encode_u_64(self.rowsAffected, serializer);
    sse_encode_i_64(self.lastInsertRowid, serializer);
  }

  @protected
  void sse_encode_record_string_libsql_return_value(
      (String, LibsqlReturnValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_libsql_return_value(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_libsql_value(
      (String, LibsqlValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_libsql_value(self.$2, serializer);
  }

  @protected
  void sse_encode_sync_result(SyncResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_transaction_commit_result(
      TransactionCommitResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_transaction_result(
      TransactionResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_transaction(self.transaction, serializer);
  }

  @protected
  void sse_encode_transaction_rollback_result(
      TransactionRollbackResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
